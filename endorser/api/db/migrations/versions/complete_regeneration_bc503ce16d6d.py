"""complete regeneration

Revision ID: bc503ce16d6d
Revises: 
Create Date: 2023-10-23 17:18:50.421342

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bc503ce16d6d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('allowedcredentialdefinition',
    sa.Column('allowed_cred_def_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('issuer_did', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('author_did', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('schema_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tag', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rev_reg_def', sa.Boolean(), nullable=False),
    sa.Column('rev_reg_entry', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('allowed_cred_def_id')
    )
    op.create_table('allowedpublicdid',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('registered_did', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('registered_did')
    )
    op.create_table('allowedschema',
    sa.Column('allowed_schema_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('author_did', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('schema_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('version', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('allowed_schema_id')
    )
    op.create_table('configurationdb',
    sa.Column('config_id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('config_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('config_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('config_id')
    )
    op.create_table('contact',
    sa.Column('contact_id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('author_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('endorse_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('connection_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('connection_protocol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('connection_alias', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('public_did', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('their_label', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('contact_id')
    )
    op.create_table('endorserequest',
    sa.Column('endorse_request_id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('transaction_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('author_goal_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('connection_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('endorser_did', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('author_did', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('transaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ledger_txn', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ledger_txn_request', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('endorse_request_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('endorserequest')
    op.drop_table('contact')
    op.drop_table('configurationdb')
    op.drop_table('allowedschema')
    op.drop_table('allowedpublicdid')
    op.drop_table('allowedcredentialdefinition')
    # ### end Alembic commands ###
